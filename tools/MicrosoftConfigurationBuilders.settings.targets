<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <CustomAfterMicrosoftCommonTargets>$(MSBuildThisFileDirectory)version.targets;$(MSBuildThisFileDirectory)signing.targets</CustomAfterMicrosoftCommonTargets>
    <RepositoryRoot>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'MicrosoftConfigurationBuilders.sln'))\</RepositoryRoot>
    <SolutionDir>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), 'MicrosoftConfigurationBuilders.sln'))\</SolutionDir>
  </PropertyGroup>

  <Import Project="$(RepositoryRoot)\packages\microbuild.core.0.3.0\build\MicroBuild.Core.props"
      Condition="Exists('$(RepositoryRoot)\packages\microbuild.core.0.3.0\build\MicroBuild.Core.props')" />
  <Import Project="$(RepositoryRoot)\packages\microbuild.core.0.3.0\build\MicroBuild.Core.targets"
      Condition="Exists('$(RepositoryRoot)\packages\microbuild.core.0.3.0\build\MicroBuild.Core.targets')" />

  <!-- Configurable properties-->

  <PropertyGroup>
    <!-- Versioning:
            Major:	'Major' for Assembly, File, Info, and Package.
            Minor:	'Minor' for Assembly, File, Info, and Package.
            Build:	Third (auto-generated) for File and Info. (Assembly is always 0)
            Revision:	'Revision' for Assembly and File.
            Release:	Third for Info and Package.
         Update package and file without touching assembly, except for major releases.
    -->
    <BuildQuality Condition="'$(BuildQuality)' == ''">rtm</BuildQuality>
    <VersionMajor>1</VersionMajor>
    <VersionMinor>0</VersionMinor>
    <VersionRevision>0</VersionRevision>
    <VersionRelease>1</VersionRelease>
    <VersionRelease Condition="'$(BuildQuality)' != 'rtm'">$(VersionRelease)-$(BuildQuality)</VersionRelease>
  </PropertyGroup>

  <PropertyGroup Label="NuGet package dependencies">
    <NuGetPackageVersion>$(VersionMajor).$(VersionMinor).$(VersionRelease)</NuGetPackageVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.nuproj'">
    <NuGetPackageVersion Condition="'$(UpdateNightlyPackages)' == 'true'">$(NuGetPackageVersion)-b$(VersionBuild)</NuGetPackageVersion>
  </PropertyGroup>

  <!-- Default properties -->

  <PropertyGroup Label="Common Configuration">
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <OutputPath>$(RepositoryRoot).binaries\bin\$(Configuration)\</OutputPath>
    <IntermediateOutputRoot>$(RepositoryRoot).binaries\obj\$(Configuration)\</IntermediateOutputRoot>
    <IntermediateOutputPath>$(IntermediateOutputRoot)$(MSBuildProjectName)\</IntermediateOutputPath>
    <AssemblyPath Condition="'$(CodeSignEnabled)' == 'true'">$(CodeSignOutputPath)</AssemblyPath>
    <AssemblyPath Condition="'$(AssemblyPath)' == ''">$(OutputPath)</AssemblyPath>
  </PropertyGroup>

  <PropertyGroup Label="Nuget Configuration">
    <NuGetOutputPath>$(RepositoryRoot).binaries\Packages\$(Configuration)</NuGetOutputPath>
    <NuGetPackSymbols Condition="'$(NuGetPackSymbols)' == ''">true</NuGetPackSymbols>
    <ReferencePackagesPath>$(RepositoryRoot)packages\</ReferencePackagesPath>
    <SourceRootFullPath>$(RepositoryRoot)\src\$(MSBuildProjectName)\</SourceRootFullPath>
  </PropertyGroup>

  <PropertyGroup>
    <TestRoot>$(RepositoryRoot)\test\Microsoft.Configuration.ConfigurationBuilders.Test</TestRoot>
    <BuildingTestProject Condition="$(MSBuildProjectDirectory.ToLower().Contains($(TestRoot.ToLower())))">true</BuildingTestProject>
  </PropertyGroup>

  <Target Name="PreventReferenceCopy" AfterTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" />
    </ItemGroup>
  </Target>

  <Target Name="SetNuSpecProperties" BeforeTargets="GenerateNuSpecFile">
    <PropertyGroup>
      <NuSpecProperties>
          NuGetPackageVersion=$(NuGetPackageVersion);
          NuGetPackageId=$(NuGetPackageId);
      </NuSpecProperties>
    </PropertyGroup>
  </Target>

  <Target Name="SuperClean" AfterTargets="Clean"  Condition="'$(MSBuildProjectExtension)' != '.nuproj'">
    <RemoveDir Directories="$(OutputPath)" />
    <RemoveDir Directories="$(IntermediateOutputRoot)" />
  </Target>

  <Target Name="SuperCleanPackage" AfterTargets="Clean" Condition="'$(MSBuildProjectExtension)' == '.nuproj'">
    <RemoveDir Directories="$(NuGetOutputPath)" />
    <RemoveDir Directories="$(NuGetSymbolsOutputPath)" />
  </Target>

</Project>
