<!--
****************************************************************************************************
Project global versioning targets.
****************************************************************************************************-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
 
  <!-- Input parameters -->
  
  <!-- NOTE: The VersionFileAttribute ItemGroup can be used to add assembly-level attributes to the generated version file, ex:
  <VersionFileAttribute Include="[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(&quot;Microsoft.Usage&quot;, &quot;CA2243:AttributeStringLiteralsShouldParseCorrectly&quot;, Justification = &quot;Justification here&quot;)]" />
  -->

  <PropertyGroup>
    <VersionFileGenerationEnabled Condition="'$(VersionFileGenerationEnabled)' == '' AND '$(MSBuildProjectExtension)' == '.csproj'">true</VersionFileGenerationEnabled>
    <VersionFileGenerationEnabled Condition="'$(VersionFileGenerationEnabled)' == ''">false</VersionFileGenerationEnabled>
  </PropertyGroup>

  <PropertyGroup>
    <VersionStartYear Condition="'$(VersionStartYear)' == ''">INVALID_VersionStartYear</VersionStartYear>
    <VersionMajor Condition="'$(VersionMajor)' == ''">INVALID_VersionMajor</VersionMajor>
    <VersionMinor Condition="'$(VersionMinor)' == ''">INVALID_VersionMinor</VersionMinor>
    <VersionRelease Condition="'$(VersionRelease)' == ''">0</VersionRelease>
    <VersionRevision Condition="'$(VersionRevision)' == ''">0</VersionRevision>
    <VersionBuild Condition="'$(VersionBuild)' == '' OR '$(VersionBuild)' == '0'">$([MSBuild]::Add(1, $([MSBuild]::Subtract($([System.DateTime]::Now.Year), $(VersionStartYear)))))$([System.DateTime]::Now.ToString("MMdd"))</VersionBuild>
  </PropertyGroup>

  <!-- Comptued parameters -->

  <PropertyGroup>
    <AssemblyVersion>$(VersionMajor).$(VersionMinor).0.$(VersionRevision)</AssemblyVersion>
    <AssemblyFileVersion>$(VersionMajor).$(VersionMinor).$(VersionRelease).$(VersionBuild)</AssemblyFileVersion>
    <AssemblyVersionFile>$(IntermediateOutputPath)$(MSBuildProjectName).version.cs</AssemblyVersionFile>
  </PropertyGroup>

  <PropertyGroup>
    <NuGetPackageVersion Condition="'$(NuGetPackageVersion)' == ''">$(VersionMajor).$(VersionMinor).$(VersionRelease)</NuGetPackageVersion>
    <NuGetPackageVersion Condition="'$(BuildQuality)' != 'rtm'">$(NuGetPackageVersion)-$(BuildQuality)</NuGetPackageVersion>
  </PropertyGroup>

  <ItemGroup Condition="'$(VersionFileGenerationEnabled)' == 'true'">
    <Compile Include="$(AssemblyVersionFile)" />
  </ItemGroup>
 
  <ItemGroup>
    <Clean Include="$(AssemblyVersionFile)" Condition="'$(MSBuildProjectExtension)' == '.csproj'"/>
  </ItemGroup>

  <PropertyGroup Condition="'$(VersionFileGenerationEnabled)' == 'true'">
    <!-- Disable assembly version defined in CommonAssemblyInfo.cs file -->
    <DefineConstants>$(DefineConstants);BUILD_GENERATED_VERSION</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <!--Force a rebuild if this file is changed -->
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <!--
 ==================================================================================================
 GenerateVersionFile target: generates assembly attributes into a source file that is included 
 in the items to compile.
 ================================================================================================== -->
  <PropertyGroup Condition="'$(VersionFileGenerationEnabled)' == 'true'">
    <CompileDependsOn>GenerateVersionFile;$(CompileDependsOn)</CompileDependsOn>
    <GenerateVersionFileDependsOn>ValidateVersionValues;ShouldGenerateVersionFile;GenerateVersionFileCore</GenerateVersionFileDependsOn>
  </PropertyGroup>
  <Target Name="GenerateVersionFile" DependsOnTargets="$(GenerateVersionFileDependsOn)" />

  <Target Name="EnsureGitInfo" Condition="'$(GitCommit)' == ''">
    <Exec Command="git describe --match= --always --dirty --abbrev=40" ConsoleToMSBuild="true" IgnoreExitCode="false" ContinueOnError="true" >
      <Output PropertyName="GitDescribeOutput" TaskParameter="ConsoleOutput" />
      <Output PropertyName="GitDescribeExit" TaskParameter="ExitCode" />
    </Exec>
    <PropertyGroup Condition="'$(GitDescribeExit)' == '0'">
      <GitCommit>$(GitDescribeOutput)</GitCommit>
    </PropertyGroup>
  </Target>

  <Target Name="GenerateVersionFileCore" Condition="'$(ShouldGenerateVersionFile)' == 'true'" DependsOnTargets="EnsureGitInfo">
    <PropertyGroup>
      <AssemblyInfoVersion Condition="'$(GitCommit)' != ''">$(VersionMajor).$(VersionMinor).$(VersionRelease)+$(GitCommit)</AssemblyInfoVersion>
      <AssemblyInfoVersion Condition="'$(AssemblyInfoVersion)' == '' AND '$(VersionBuild)' != ''">$(VersionMajor).$(VersionMinor).$(VersionRelease)-$(VersionBuild)</AssemblyInfoVersion>
      <AssemblyInfoVersion Condition="'$(AssemblyInfoVersion)' == ''">$(AssemblyFileVersion)</AssemblyInfoVersion>
    </PropertyGroup>
    <ItemGroup>
      <LinesToWrite Include="// $(SourceFileCopyright)" Condition="'$(SourceFileCopyright)' != ''"/>
      <LinesToWrite Include="// &lt;auto-generated&gt;" />
      <LinesToWrite Include="//   This code was generated by a tool." />
      <LinesToWrite Include="// &lt;/auto-generated&gt;" />
      <LinesToWrite Include="[assembly: System.Reflection.AssemblyCompany(&quot;$(AssemblyCompany)&quot;)]" Condition="'$(AssemblyCompany)' != ''"/>
      <LinesToWrite Include="[assembly: System.Reflection.AssemblyCopyright(&quot;$(AssemblyCopyright)&quot;)]" Condition="'$(AssemblyCopyright)' != ''"/>
      <LinesToWrite Include="[assembly: System.Reflection.AssemblyVersion(&quot;$(AssemblyVersion)&quot;)]" Condition="'$(AssemblyVersion)' != ''"/>
      <LinesToWrite Include="[assembly: System.Reflection.AssemblyFileVersion(&quot;$(AssemblyFileVersion)&quot;)]" Condition="'$(AssemblyFileVersion)' != ''"/>
      <LinesToWrite Include="[assembly: System.Reflection.AssemblyInformationalVersion(&quot;$(AssemblyInfoVersion)&quot;)]" Condition="'$(AssemblyInfoVersion)' != ''" />
      <LinesToWrite Include="[assembly: System.Resources.SatelliteContractVersionAttribute(&quot;$(SatelliteContractVersion)&quot;)]" Condition="'$(SatelliteContractVersion)' != ''"/>
      <LinesToWrite Include="@(VersionFileAttribute)" Condition="'@(VersionFileAttribute)' != ''" />
    </ItemGroup>
    <WriteLinesToFile File="$(AssemblyVersionFile)" Lines="@(LinesToWrite)" Overwrite="true"  Encoding="Unicode"/>
    <Message Text="Assembly Version File: $(AssemblyVersionFile)" />
  </Target>

  <!--
 ==================================================================================================
 ShouldGenerateVersionFile target: determines whether a version needs to be generated.
 ================================================================================================== -->
  <Target Name="ShouldGenerateVersionFile">
    <ReadLinesFromFile File="$(AssemblyVersionFile)" Condition="Exists('$(AssemblyVersionFile)')">
      <Output ItemName="VersionText" TaskParameter="Lines"/>
    </ReadLinesFromFile>
    <PropertyGroup>
      <VersionText>@(VersionText)</VersionText>
      <ShouldGenerateVersionFile>!$(VersionText.Contains('$(AssemblyFileVersion)'))</ShouldGenerateVersionFile>
    </PropertyGroup>
  </Target>

  <Target Name="ValidateVersionValues">
    <!-- Throw if any of the version values is not int16 -->
    <PropertyGroup>
      <VersionMajor>$([System.Convert]::ToInt16('$(VersionMajor)'))</VersionMajor>
      <VersionMinor>$([System.Convert]::ToInt16('$(VersionMinor)'))</VersionMinor>
      <VersionBuild>$([System.Convert]::ToInt16('$(VersionBuild)'))</VersionBuild>
      <VersionRevision>$([System.Convert]::ToInt16('$(VersionRevision)'))</VersionRevision>
    </PropertyGroup>
  </Target>

</Project>
